This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
actividad-detalle.txt
components.json
eslint.config.mjs
Estructura.md
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/actividad-detalle/[id]/page.tsx
src/app/actividades/columns.tsx
src/app/actividades/NewActivityForm.tsx
src/app/actividades/page.tsx
src/app/elementos/columns.tsx
src/app/elementos/NewElementForm.tsx
src/app/elementos/page.tsx
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/app/resumen/page.tsx
src/components/ui/button.tsx
src/components/ui/checkbox.tsx
src/components/ui/data-table-pagination.tsx
src/components/ui/data-table-toolbar.tsx
src/components/ui/data-table.tsx
src/components/ui/dialog.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/navigation-menu.tsx
src/components/ui/select.tsx
src/components/ui/table.tsx
src/lib/supabase.ts
src/lib/utils.ts
src/services/actividad-elemento.ts
src/services/actividadService.ts
src/services/elementoService.ts
src/types/actividad.ts
src/types/actividadElementos.ts
src/types/elemento.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: actividad-detalle.txt
================
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ActividadService} from '../../services/actividad.service';
import { ElementoService } from '../../services/elemento.service'; // Importa el servicio de elementos
import { Actividad } from '../../../shared/models/actividad.model';
import { Elemento } from '../../../shared/models/elemento.model'; // Importa la interfaz Elemento
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-actividad-detalle',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './actividad-detalle.component.html',
  styleUrls: ['./actividad-detalle.component.css'],
 
 
})
export class ActividadDetalleComponent implements OnInit {
  actividad: Actividad | null = null;
  elementos: Elemento[] = [];
  elementosAsignados: Elemento[] = [];
  mostrarAsignarElemento: boolean = false;
  loading: boolean = false; // Add loading state property to your component
  
  searchTerm:string='';

  columns = [
    { prop: 'codigo', name: 'Codigo' },
    { prop: 'nombre', name: 'Nombre' },
  ];

  constructor(
    private route: ActivatedRoute,
    private actividadService: ActividadService,
    private elementoService: ElementoService // Inyecta el servicio de elementos
  ) {}

  async ngOnInit() {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      await this.loadActividad(Number(id));
      await this.loadElementosAsignados(Number(id));
    }
  }

  async loadActividad(id: number) {
    try {
      this.actividad = await this.actividadService.getActividadById(id);
    } catch (error) {
      console.error('Error cargando actividad:', error);
    }
  }

  async loadElementosDisponibles() {
    try {
      this.elementos = await this.elementoService.getElementosNoAsignados(this.actividad?.id!);
    } catch (error) {
      console.error('Error cargando elementos:', error);
    }
  }

  async loadElementosAsignados(actividadId: number) {
    try {
      this.elementosAsignados = await this.actividadService.getElementosAsignados(actividadId);
    } catch (error) {
      console.error('Error cargando elementos asignados:', error);
    }
  }

  async toggleAsignarElemento() {
    this.mostrarAsignarElemento = !this.mostrarAsignarElemento;
    if (this.mostrarAsignarElemento) {
      await this.loadElementosDisponibles();
    }
  }

  async asignarElemento(elemento: Elemento) {
    if (!this.actividad?.id || !elemento?.id) {
      console.warn('Actividad ID or Elemento ID is missing');
      return;
    }
  
    try {
      this.loading = true; // Add loading state property to your component
      await this.actividadService.asignarElemento(this.actividad.id, elemento.id);

      this.actividad.precio_unitario+=elemento.precio_unitario;
      
      this.elementos = this.elementos.filter(e => e.id !== elemento.id);
      this.elementosAsignados = [...this.elementosAsignados, elemento];
      
      //alert('Elemento asignado correctamente');
      
    } catch (error: unknown) {
      console.error('Error asignando elemento:', error);
      //alert('Error al asignar elemento');
    } finally {
      this.loading = false;
    }
  }

  async desasignarElemento(elementoId: number) {
    if (!this.actividad) return;

    try {
      await this.actividadService.desasignarElemento(this.actividad.id, elementoId);
      
      
      // Actualizar listas
      const elemento = this.elementosAsignados.find(e => e.id === elementoId);
      
      if (elemento) {
        this.actividad.precio_unitario-=elemento.precio_unitario;
        this.elementosAsignados = this.elementosAsignados.filter(e => e.id !== elementoId);
        this.elementos = [...this.elementos, elemento];
      }
      
      //alert('Elemento desasignado correctamente');
    } catch (error) {
      console.error('Error desasignando elemento:', error);
      //alert('Error al desasignar elemento');
    }
  }

  filteredData() {
    return this.elementos.filter((item) =>
      Object.values(item).some((value) =>
        value.toString().toLowerCase().includes(this.searchTerm.toLowerCase())
      )
    );
  }
}
  

return(
<div class="container">
  <div class="container text-center" style="margin: 20px">
    <h3>Detalle de la Actividad</h3>
  </div>
  <div *ngIf="actividad; else noData">
    <table class="table table-hover">
      <thead class="table-secondary">
        <tr>
          <th scope="col">Codigo</th>
          <th scope="col">Nombre</th>
          <th scope="col">Unidad</th>
          <th scope="col">Precio Unitario</th>
          <th scope="col">Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>{{ actividad.codigo }}</td>
          <td>{{ actividad.nombre }}</td>
          <td>{{ actividad.unidad }}</td>
          <td>{{ actividad.precio_unitario |currency }}</td>
          <td>
            <!-- Botón para mostrar/ocultar la sección de "asignar elemento" -->
            <button (click)="toggleAsignarElemento()">
              {{ mostrarAsignarElemento ? "Ocultar" : "Asignar" }}
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <!-- Tabla de elementos asignados -->
  <div class="seccion-asignados">
    <h3>Elementos asignados</h3>
    <div class="tabla-con-scroll">
      <table *ngIf="elementosAsignados.length > 0; else sinAsignados">
        <thead>
          <tr>
            <th>Codigo</th>
            <th>Nombre</th>
            <th>Unidad</th>
            <th>Precio Unitario</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let elemento of elementosAsignados">
            <td>{{elemento.codigo}}</td>
            <td>{{ elemento.nombre }}</td>
            <td>{{ elemento.unidad }}</td>
            <td>{{ elemento.precio_unitario | currency }}</td>
            <td>
              <button (click)="desasignarElemento(elemento.id!)">Quitar</button>
            </td>
          </tr>
        </tbody>
      </table>
      <ng-template #sinAsignados>
        <p>No hay elementos asignados a esta actividad</p>
      </ng-template>
    </div>
  </div>

  <!-- Tabla de elementos disponibles -->
  <div *ngIf="mostrarAsignarElemento" class="seccion-disponibles">
    <h3>Listado de Elementos a Asignar</h3>
    <div class="container text-end" style="margin: 10px">
      <input type="text" [(ngModel)]="searchTerm" placeholder="Buscar..." />
    </div>
    <div class="tabla-con-scroll">
      <table *ngIf="elementos.length > 0; else sinDisponibles">
        <thead>
          <tr>
            <th>Codigo</th>
            <th>Nombre</th>
            <th>Unidad</th>
            <th>Precio Unitario</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let elemento of filteredData()">
            <td>{{elemento.codigo}}</td>
            <td>{{ elemento.nombre }}</td>
            <td>{{elemento.unidad}}</td>
            <td>{{ elemento.precio_unitario | currency }}</td>
            <td>
              <button (click)="asignarElemento(elemento)">Asignar</button>
            </td>
          </tr>
        </tbody>
      </table>
      <ng-template #sinDisponibles>
        <p>No hay elementos disponibles para asignar</p>
      </ng-template>
    </div>
  </div>
</div>
<br>
<br>




)

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: Estructura.md
================
### **Descripción Funcional de la Aplicación**

La aplicación permitirá gestionar actividades relacionadas con proyectos de construcción (o cualquier dominio similar) mediante la relación de elementos y cantidades. Está diseñada para ser modular y flexible, permitiendo integrarse con cualquier frontend o backend. A continuación, se describe la estructura de las tablas, las relaciones entre ellas, y las consultas necesarias para crearlas y poblarlas con datos de ejemplo.

---

### **Estructura de las Tablas**

1. **Tabla `Actividades`**
   - Contiene información general sobre actividades, como su nombre y descripción.
   - **Campos**:
     - `id`: Identificador único (entero o UUID).
     - `nombre`: Nombre de la actividad (texto).
     - `descripcion`: Breve descripción de la actividad (texto).

2. **Tabla `Elementos`**
   - Contiene los detalles de los elementos utilizados en las actividades (materiales, mano de obra, maquinaria, etc.).
   - **Campos**:
     - `id`: Identificador único (entero o UUID).
     - `nombre`: Nombre del elemento (texto).
     - `tipo`: Tipo de elemento (opciones como "Material", "Mano de Obra", "Maquinaria").
     - `costo`: Costo unitario del elemento (decimal).

3. **Tabla `Tabla_Vinculo`**
   - Representa la relación entre actividades y elementos, incluyendo la cantidad utilizada de cada elemento en una actividad específica.
   - **Campos**:
     - `id`: Identificador único (entero o UUID).
     - `actividad_id`: Clave foránea que referencia una actividad en la tabla `Actividades`.
     - `elemento_id`: Clave foránea que referencia un elemento en la tabla `Elementos`.
     - `cantidad`: Cantidad del elemento asociado a la actividad (decimal).

---

### **Relaciones entre las Tablas**
- **Uno a Muchos**:
  - Una actividad puede estar vinculada con varios elementos a través de la tabla `Tabla_Vinculo`.
- **Muchos a Muchos**:
  - Los elementos pueden estar asociados con múltiples actividades, lo cual se modela con la tabla `Tabla_Vinculo`.

---

### **Consultas SQL**

#### **Creación de Tablas**
```sql
CREATE TABLE Actividades (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    descripcion TEXT
);

CREATE TABLE Elementos (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    tipo TEXT NOT NULL CHECK (tipo IN ('Material', 'Mano de Obra', 'Maquinaria')),
    costo DECIMAL(10, 2) NOT NULL
);

CREATE TABLE Tabla_Vinculo (
    id SERIAL PRIMARY KEY,
    actividad_id INT NOT NULL,
    elemento_id INT NOT NULL,
    cantidad DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (actividad_id) REFERENCES Actividades (id),
    FOREIGN KEY (elemento_id) REFERENCES Elementos (id)
);
```

#### **Datos de Ejemplo**

**Tabla `Actividades`**:
```sql
INSERT INTO Actividades (nombre, descripcion)
VALUES 
('Construcción de cimientos', 'Actividad de construcción de los cimientos de un edificio'),
('Instalación eléctrica', 'Colocación de cableado y conexiones eléctricas');
```

**Tabla `Elementos`**:
```sql
INSERT INTO Elementos (nombre, tipo, costo)
VALUES 
('Cemento', 'Material', 5000.00),
('Mano de obra albañil', 'Mano de Obra', 15000.00),
('Excavadora', 'Maquinaria', 250000.00);
```

**Tabla `Tabla_Vinculo`**:
```sql
INSERT INTO Tabla_Vinculo (actividad_id, elemento_id, cantidad)
VALUES 
(1, 1, 50),  -- 50 unidades de Cemento para la construcción de cimientos
(1, 2, 5),   -- 5 días de Mano de obra albañil para la construcción de cimientos
(2, 2, 3),   -- 3 días de Mano de obra albañil para la instalación eléctrica
(2, 3, 1);   -- 1 Excavadora para la instalación eléctrica
```

---

### **Ejemplo de Consultas**

1. **Obtener todas las actividades y sus elementos asociados**:
```sql
SELECT a.nombre AS actividad, e.nombre AS elemento, e.tipo, e.costo, ae.cantidad
FROM actividad_elementos ae
JOIN Actividades a ON ae.actividad_id = a.id
JOIN Elementos e ON v.elemento_id = e.id;
```

2. **Calcular el costo total por actividad**:
```sql
SELECT a.nombre AS actividad, SUM(e.costo * v.cantidad) AS costo_total
FROM Tabla_Vinculo v
JOIN Actividades a ON v.actividad_id = a.id
JOIN Elementos e ON v.elemento_id = e.id
GROUP BY a.nombre;
```

3. **Listar actividades que utilizan un tipo específico de elemento (por ejemplo, "Material")**:
```sql
SELECT DISTINCT a.nombre AS actividad
FROM Tabla_Vinculo v
JOIN Actividades a ON v.actividad_id = a.id
JOIN Elementos e ON v.elemento_id = e.id
WHERE e.tipo = 'Material';
```

---

### **Flujo de la Aplicación**

#### **Backend**
1. **API para CRUD**:
   - Endpoints para gestionar las actividades, elementos, y sus relaciones (tabla de vínculo).
   - Ejemplo de endpoints:
     - `GET /actividades`: Listar todas las actividades.
     - `POST /actividades`: Crear una nueva actividad.
     - `GET /actividades/:id/elementos`: Obtener los elementos de una actividad específica.
   - El backend puede ser construido con frameworks como:
     - **Node.js**: Express, NestJS.
     - **Python**: Django, Flask, FastAPI.
     - **PHP**: Laravel.

2. **Validaciones**:
   - Asegurar que las relaciones sean consistentes (p. ej., no se puede eliminar un elemento asociado a una actividad sin primero eliminar el vínculo).

#### **Frontend**
1. **Gestión de Actividades y Elementos**:
   - Pantalla para listar actividades con sus descripciones y costos totales.
   - Pantalla para gestionar elementos con su tipo y costo.

2. **Relación Visual**:
   - Vista en forma de tabla o árbol para mostrar cómo las actividades están vinculadas con los elementos.

3. **Frameworks recomendados**:
   - **React/Next.js**: Para una SPA o SSR.
   - **Vue/Nuxt.js**: Para una experiencia similar.
   - **Angular**: Para aplicaciones más estructuradas.

---

### **Escalabilidad**
- Este diseño puede ser escalado fácilmente a microservicios si es necesario, separando el backend de la base de datos.
- Admite integración con sistemas de autenticación para controlar acceso a las actividades y elementos.

---

### **Mejoras Sugeridas**

1. **Gestión de Unidades**:
   - Agregar una tabla `Unidades` para gestionar diferentes unidades de medida (kg, m², hrs, etc.)
   - Modificar la tabla `Elementos` para incluir una referencia a la unidad de medida

2. **Control de Versiones**:
   - Agregar campos de timestamp (created_at, updated_at) en las tablas principales
   - Implementar un sistema de versionado para actividades y sus costos históricos

3. **Seguridad y Auditoría**:
   - Agregar tabla de usuarios y roles
   - Implementar registro de cambios (audit logs) para modificaciones importantes

4. **Optimización de Consultas**:
   - Crear índices para las columnas frecuentemente consultadas
   - Implementar vistas materializadas para cálculos comunes de costos

5. **Validaciones Adicionales**:
   - Restricciones de cantidad mínima/máxima en Tabla_Vinculo
   - Validaciones de costo según el tipo de elemento

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "apu-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@supabase/supabase-js": "^2.49.1",
    "@tanstack/react-table": "^8.21.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.479.0",
    "next": "15.2.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "xlsx": "^0.18.5",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
Proyecto de Precios Unitarios de Actividades y Elementos de Construccion.

Creado en Next.js y Supabase

## Getting Started

First, run the development server:

```bash
npm run dev

```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/actividad-detalle/[id]/page.tsx
================
// src/app/actividad-detalle/[id]/page.tsx
"use client"; // Marcar como componente del cliente

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { Actividad } from "@/types/actividad";
import { Elemento } from "@/types/elemento";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

import { getActividadById, updateActividad } from "@/services/actividadService";
import {
  getElementosNoAsignados,
  getElementosAsignados,
  asignarElemento,
  desasignarElemento,
} from "@/services/actividad-elemento";

export default function ActividadDetallePage() {
  const { id } = useParams(); // Obtener el ID de la URL
  const [actividad, setActividad] = useState<Actividad | null>(null);
  const [elementosAsignados, setElementosAsignados] = useState<Elemento[]>([]);
  const [elementosDisponibles, setElementosDisponibles] = useState<Elemento[]>([]);
  const [mostrarAsignarElemento, setMostrarAsignarElemento] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(false);

  // Cargar la actividad y los elementos asignados al montar el componente
  useEffect(() => {
    const loadData = async () => {
      if (id) {
        const actividadId = Number(id);
        const actividad = await getActividadById(actividadId);
        setActividad(actividad);
  
        const elementosAsignados = await getElementosAsignados(actividadId);
        setElementosAsignados(elementosAsignados);
      }
    };
  
    loadData();
  }, [id]);

  // Cargar elementos disponibles cuando se muestra la sección de asignar
  useEffect(() => {
    const loadElementosDisponibles = async () => {
      if (mostrarAsignarElemento && actividad?.id) {
        const elementos = await getElementosNoAsignados(actividad.id);
        setElementosDisponibles(elementos);
      }
    };

    loadElementosDisponibles();
  }, [mostrarAsignarElemento, actividad]);

  const handleAsignarElemento = async (elemento: Elemento) => {
    if (!actividad?.id || !elemento?.id) return;
  
    setLoading(true);
    try {
      // Asignar el elemento a la actividad
      await asignarElemento(actividad.id, elemento.id);
  
      // Calcular el nuevo precio unitario
      const nuevoPrecioUnitario = actividad.precio_unitario + elemento.precio_unitario;
  
      // Actualizar el precio unitario en la base de datos
      await updateActividad(actividad.id, { precio_unitario: nuevoPrecioUnitario });
  
      // Actualizar el estado local de la actividad
      const updatedActividad = { ...actividad, precio_unitario: nuevoPrecioUnitario };
      setActividad(updatedActividad);
  
      // Actualizar las listas de elementos
      setElementosDisponibles((prev) => prev.filter((e) => e.id !== elemento.id));
      setElementosAsignados((prev) => [...prev, elemento]);
    } catch (error) {
      console.error("Error asignando elemento:", error);
    } finally {
      setLoading(false);
    }
  };

  // Función para desasignar un elemento de la actividad
  const handleDesasignarElemento = async (elementoId: number) => {
    if (!actividad?.id) return;

    try {
      await desasignarElemento(actividad.id, elementoId);

      // Actualizar el precio unitario de la actividad
      const elemento = elementosAsignados.find((e) => e.id === elementoId);
      if (elemento) {
        const updatedActividad = { ...actividad, precio_unitario: actividad.precio_unitario - elemento.precio_unitario };
        setActividad(updatedActividad);
      }

      // Actualizar las listas de elementos
      setElementosAsignados((prev) => prev.filter((e) => e.id !== elementoId));
      setElementosDisponibles((prev) => [...prev, ...elementosAsignados.filter((e) => e.id === elementoId)]);
    } catch (error) {
      console.error("Error desasignando elemento:", error);
    }
  };

  // Filtrar elementos disponibles según el término de búsqueda
  const filteredElementos = elementosDisponibles.filter((elemento) =>
    Object.values(elemento).some((value) =>
      value.toString().toLowerCase().includes(searchTerm.toLowerCase())
    )
  );

  if (!actividad) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="container mx-auto py-10">
      <div className="text-center mb-8">
        <h1 className="text-2xl font-bold">Detalle de la Actividad</h1>
      </div>

      {/* Detalles de la actividad */}
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Código</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Unidad</TableHead>
            <TableHead>Precio Unitario</TableHead>
            <TableHead>Acciones</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <TableRow>
            <TableCell>{actividad.codigo}</TableCell>
            <TableCell>{actividad.nombre}</TableCell>
            <TableCell>{actividad.unidad}</TableCell>
            <TableCell>{actividad.precio_unitario}</TableCell>
            <TableCell>
              <Button onClick={() => setMostrarAsignarElemento(!mostrarAsignarElemento)}>
                {mostrarAsignarElemento ? "Ocultar" : "Asignar"}
              </Button>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      {/* Elementos asignados */}
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4">Elementos Asignados</h2>
        {elementosAsignados.length > 0 ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Código</TableHead>
                <TableHead>Nombre</TableHead>
                <TableHead>Unidad</TableHead>
                <TableHead>Precio Unitario</TableHead>
                <TableHead>Acciones</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {elementosAsignados.map((elemento) => (
                <TableRow key={elemento.id}>
                  <TableCell>{elemento.codigo}</TableCell>
                  <TableCell>{elemento.nombre}</TableCell>
                  <TableCell>{elemento.unidad}</TableCell>
                  <TableCell>{elemento.precio_unitario}</TableCell>
                  <TableCell>
                    <Button onClick={() => handleDesasignarElemento(elemento.id!)}>
                      Quitar
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <p>No hay elementos asignados a esta actividad.</p>
        )}
      </div>

      {/* Elementos disponibles para asignar */}
      {mostrarAsignarElemento && (
        <div className="mt-8">
          <h2 className="text-xl font-bold mb-4">Elementos Disponibles</h2>
          <div className="flex justify-end">
            <input
              type="text"
              placeholder="Buscar..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              
            />
          </div>
          {filteredElementos.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Código</TableHead>
                  <TableHead>Nombre</TableHead>
                  <TableHead>Unidad</TableHead>
                  <TableHead>Precio Unitario</TableHead>
                  <TableHead>Acciones</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredElementos.map((elemento) => (
                  <TableRow key={elemento.id}>
                    <TableCell>{elemento.codigo}</TableCell>
                    <TableCell>{elemento.nombre}</TableCell>
                    <TableCell>{elemento.unidad}</TableCell>
                    <TableCell>{elemento.precio_unitario}</TableCell>
                    <TableCell>
                      <Button onClick={() => handleAsignarElemento(elemento)}>
                        Asignar
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <p>No hay elementos disponibles para asignar.</p>
          )}
        </div>
      )}
    </div>
  );
}

================
File: src/app/actividades/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import {
  MoreHorizontal,
  ArrowUpRight,
  Pencil,
  Trash2,
  CheckIcon,
  PlusIcon,
} from "lucide-react";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Actividad, UNIDADES } from "@/types/actividad";
import Link from "next/link";

import { deleteActividad, updateActividad } from "@/services/actividadService";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { memo } from "react";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";

import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import NewActivityForm from "./NewActivityForm";

interface DialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  actividad: Actividad;
}

const EditableCell = memo(
  ({
    value,
    onSave,
  }: {
    value: string;
    onSave: (newValue: string) => void;
  }) => {
    const [editingValue, setEditingValue] = useState(value);

    const handleSave = () => {
      onSave(editingValue);
    };

    return (
      <div className="flex gap-2">
        <Input
          value={editingValue}
          onChange={(e) => setEditingValue(e.target.value)}
          autoFocus
        />
        <Button variant="ghost" size="icon" onClick={handleSave}>
          <CheckIcon className="h-4 w-4" />
        </Button>
      </div>
    );
  }
);

export default EditableCell;

const handleDelete = async (id: string) => {
  if (!window.confirm("¿Estás seguro de eliminar?")) return;

  try {
    await deleteActividad(id);
    window.location.reload();
  } catch (error) {
    console.error("Error al eliminar el gasto:", error);
    alert("Hubo un error al eliminar el gasto");
  }
};

export const columns: ColumnDef<Actividad>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    id: "codigo",
    accessorKey: "codigo",
    header: "Código",
    enableGlobalFilter: true,
    cell: ({ row }) => {
      const actividad = row.original;
      return (
        <Link
          href={`/actividad-detalle/${actividad.id}`} // Ruta dinámica
          className="text-blue-500 hover:underline"
        >
          {actividad.codigo}
        </Link>
      );
    },
  },
  {
    id: "nombre",
    accessorKey: "nombre",
    enableGlobalFilter: true,
    header: "Nombre",
    cell: ({ row }) => {
      const actividad = row.original;
      return (
        <Link
          href={`/actividad-detalle/${actividad.id}`} // Ruta dinámica
          className="text-blue-500 hover:underline"
        >
          {actividad.nombre}
        </Link>
      );
    },
  },
  {
    id: "descripcion",
    accessorKey: "descripcion",
    header: "Descripción",
    enableGlobalFilter: true,
  },
  {
    id: "unidad",
    accessorKey: "unidad",
    header: "Unidad",
  },
  {
    id: "acciones",
    header: "Acciones",
    cell: ({ row }) => {
      const [isEditing, setIsEditing] = useState(false);
      const actividad = row.original;
  
      // Estados para los campos editables
      const [codigoEditado, setCodigoEditado] = useState(actividad.codigo);
      const [nombreEditado, setNombreEditado] = useState(actividad.nombre);
      const [descripcionEditada, setDescripcionEditada] = useState(actividad.descripcion);
      const [unidadEditada, setUnidadEditada] = useState(actividad.unidad);
  
      const handleSave = async () => {
        const updatedActividad = {
          ...actividad,
          codigo: codigoEditado,
          nombre: nombreEditado,
          descripcion: descripcionEditada,
          unidad: unidadEditada,
        };
  
        try {
          await updateActividad(updatedActividad.id, updatedActividad);
          setIsEditing(false);
          window.location.reload(); // Recargar la página para reflejar los cambios
        } catch (error) {
          console.error("Error al actualizar la actividad:", error);
          alert("Hubo un error al actualizar la actividad");
        }
      };
  
      return (
        <div className="flex gap-2">
          {/* Botón Editar */}
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsEditing(true)}
          >
            <Pencil className="h-4 w-4" />
          </Button>
  
          {/* Botón Eliminar */}
          <Button
            variant="ghost"
            size="icon"
            onClick={() => handleDelete(actividad.id.toString())}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
  
          {/* Diálogo de edición */}
          <Dialog open={isEditing} onOpenChange={setIsEditing}>
            <DialogContent>
              <DialogTitle>Editar Actividad</DialogTitle>
              <div className="space-y-4">
                {/* Campo Código */}
                <div>
                  <label className="block text-sm font-medium mb-1">Código</label>
                  <Input
                    value={codigoEditado}
                    onChange={(e) => setCodigoEditado(e.target.value)}
                    placeholder="Código"
                  />
                </div>
  
                {/* Campo Nombre */}
                <div>
                  <label className="block text-sm font-medium mb-1">Nombre</label>
                  <Input
                    value={nombreEditado}
                    onChange={(e) => setNombreEditado(e.target.value)}
                    placeholder="Nombre"
                  />
                </div>
  
                {/* Campo Descripción */}
                <div>
                  <label className="block text-sm font-medium mb-1">Descripción</label>
                  <Input
                    value={descripcionEditada}
                    onChange={(e) => setDescripcionEditada(e.target.value)}
                    placeholder="Descripción"
                  />
                </div>
  
                {/* Campo Unidad (Select) */}
                <div>
                  <label className="block text-sm font-medium mb-1">Unidad</label>
                  <Select
                    value={unidadEditada}
                    onValueChange={(value) => setUnidadEditada(value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona una unidad" />
                    </SelectTrigger>
                    <SelectContent>
                      {UNIDADES.map((unidad) => (
                        <SelectItem key={unidad} value={unidad}>
                          {unidad}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
  
                {/* Botones de acción */}
                <div className="flex justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditing(false)}
                  >
                    Cancelar
                  </Button>
                  <Button onClick={handleSave}>Guardar</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      );
    },
  },
];

================
File: src/app/actividades/NewActivityForm.tsx
================
// src/app/actividades/NewActivityForm.tsx
"use client";

import { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import { PlusIcon } from "lucide-react";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { createActividad } from "@/services/actividadService";
import { ActividadCreate } from "@/types/actividad";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { UNIDADES } from "@/types/actividad";

interface FormValues {
  codigo: string;
  nombre: string;
  descripcion: string;
  unidad: string;
  precio_unitario: number;
}

export default function NewActivityForm() {
  const [isOpen, setIsOpen] = useState(false);
  const form = useForm<FormValues>();

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    try {
      const result = await createActividad(data);
      if (result.success) {
        setIsOpen(false);
        window.location.reload();
      } else {
        alert(result.error);
      }
    } catch (error) {
      console.error("Error creating actividad:", error);
      alert("Hubo un error al crear la actividad");
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <PlusIcon className="w-4 h-4 mr-1" />
          Agregar Actividad
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Nueva Actividad</DialogTitle>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="codigo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Código</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="nombre"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nombre</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="descripcion"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descripción</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="unidad"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Unidad</FormLabel>
                  <FormControl>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecciona una unidad" />
                      </SelectTrigger>
                      <SelectContent>
                        {UNIDADES.map((unidad) => (
                          <SelectItem key={unidad} value={unidad}>
                            {unidad}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end">
              <Button
                variant="destructive"
                onClick={() => setIsOpen(false)}
                className="mr-2"
              >
                Cancelar
              </Button>
              <Button type="submit">Crear Actividad</Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/app/actividades/page.tsx
================
import Link from 'next/link';
import { getActividades } from "@/services/actividadService";
import { Actividad } from "@/types/actividad";
import { DataTable } from "@/components/ui/data-table";
import { columns } from "./columns";
import NewActivityForm from "./NewActivityForm";

export default async function HomePage() {
  const actividades: Actividad[] = await getActividades({ cache: "no-store" });

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-4 text-center">Base de Actividades</h1>

      {/* Tabla de actividades con el botón "Agregar" */}
      <DataTable
        columns={columns}
        data={actividades}
        addButton={<NewActivityForm />}
      />

      
    </div>
  );
}

================
File: src/app/elementos/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { MoreHorizontal, ArrowUpRight, Pencil, Trash2, CheckIcon, PlusIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Elemento } from "@/types/elemento";

import { deleteElemento, updateElemento } from "@/services/elementoService";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { memo } from "react";
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";
import { ArrowUpDown } from "lucide-react"
 

import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import NewElementForm from "./NewElementForm";


interface DialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  elemento: Elemento;
}

interface EditableCellProps {
  value: number;
  onSave: (newValue: number) => void;
}

const EditableCell = memo(({ value, onSave }: EditableCellProps) => {
  const [editingValue, setEditingValue] = useState(value.toString());

  const handleSave = () => {
    const numericValue = parseFloat(editingValue);
    if (!isNaN(numericValue)) {
      onSave(numericValue);
    } else {
      alert("Por favor, ingresa un valor numérico válido.");
    }
  };

  return (
    <div className="flex gap-2">
      <Input
        type="number"
        value={editingValue}
        onChange={(e) => setEditingValue(e.target.value)}
        autoFocus
      />
      <Button variant="ghost" size="icon" onClick={handleSave}>
        <CheckIcon className="h-4 w-4" />
      </Button>
    </div>
  );
});

EditableCell.displayName = "EditableCell"; // Para evitar problemas con React.memo


const handleDelete = async (id:number) => {
  if (!window.confirm("¿Estás seguro de eliminar este elemento?")) return;

  try {
    await deleteElemento(id);
    window.location.reload();
  } catch (error) {
    console.error("Error al eliminar el elemento:", error);
    alert("Hubo un error al eliminar el elemento");
  }
};

export const columns: ColumnDef<Elemento>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    id: "codigo",
    accessorKey: "codigo",
    header: "Código",
  },
  {
    id: "nombre",
    accessorKey: "nombre",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Nombre
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      )
    },
   /*  cell: ({ row }) => {
      const [isEditing, setIsEditing] = useState(false);
      const elemento = row.original;
  
      const handleSave = async (newValue: string) => {
        const updatedElemento = { ...elemento, nombre: newValue };
        try {
          await updateElemento(updatedElemento.id, updatedElemento);
          setIsEditing(false);
          window.location.reload();
        } catch (error) {
          console.error("Error al actualizar el elemento:", error);
          alert("Hubo un error al actualizar el elemento");
        }
      };
  
      return isEditing ? (
        <EditableCell value={elemento.nombre} onSave={handleSave} />
      ) : (
        <span onClick={() => setIsEditing(true)}>{elemento.nombre}</span>
      );
    }, */
  },
  {
    id: "tipo",
    accessorKey: "tipo",
    header:"Tipo",
  },
  {
    id: "unidad",
    accessorKey: "unidad",
    header: "Unidad",
  },
  {
    id: "precio_unitario",
    accessorKey: "precio_unitario",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Precio Unitario
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => {
      const [isEditing, setIsEditing] = useState(false);
      const elemento = row.original;
  
      const handleSave = async (newValue: number) => {
        const updatedElemento = { 
          ...elemento, 
          precio_unitario: newValue,
          fecha: new Date(), // Actualizar la fecha al momento de guardar
        };
  
        try {
          await updateElemento(updatedElemento.id, updatedElemento);
          setIsEditing(false);
          window.location.reload(); // Recargar la página para reflejar los cambios
        } catch (error) {
          console.error("Error al actualizar el elemento:", error);
          alert("Hubo un error al actualizar el elemento");
        }
      };
  
      return isEditing ? (
        <EditableCell value={elemento.precio_unitario} onSave={handleSave} />
      ) : (
        <span onClick={() => setIsEditing(true)}>{elemento.precio_unitario}</span>
      );
    },
  },
  {
    id: "fecha",
    accessorKey: "fecha",
    header: "Fecha",
   /*  cell: ({ row }) => {
      const fecha = row.original.fecha;
      return <span>{fecha.toDateString}</span>; // Formatear la fecha
    }, */
  },
  {
    id: "acciones",
    header: "Acciones",
    cell: ({ row }) => {
      const [isEditing, setIsEditing] = useState(false);
      const elemento = row.original;
  
      const handleSave = async (updatedElemento: Elemento) => {
        try {
          await updateElemento(updatedElemento.id, updatedElemento);
          setIsEditing(false);
          window.location.reload();
        } catch (error) {
          console.error("Error al actualizar el elemento:", error);
          alert("Hubo un error al actualizar el elemento");
        }
      };
  
      return (
        <div className="flex gap-2">
         
  
          {/* Botón Editar */}
          {isEditing ? (
            <Button
              variant="ghost"
              size="icon"
              onClick={() => handleSave(elemento)}
            >
              <CheckIcon className="h-4 w-4" />
            </Button>
          ) : (
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsEditing(true)}
            >
              <Pencil className="h-4 w-4" />
            </Button>
          )}
  
          {/* Botón Eliminar */}
          <Button
            variant="ghost"
            size="icon"
            onClick={() => handleDelete(elemento.id)}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      );
    },
  }
];

================
File: src/app/elementos/NewElementForm.tsx
================
"use client";

import { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Dialog, DialogTrigger, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { PlusIcon } from "lucide-react";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { createElemento } from "@/services/elementoService";
import { ElementoCreate } from "@/types/elemento";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";

import { UNIDADES, TIPOS } from "@/types/elemento";

interface FormValues {
  codigo: string;
  nombre: string;
  tipo: string;
  unidad: string;
  precio_unitario: number;
  fecha: Date;
}

export default function NewElementForm() {
  const [isOpen, setIsOpen] = useState(false);
  const form = useForm<FormValues>();

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    try {
      const result = await createElemento(data);
      if (result.success) {
        setIsOpen(false);
        window.location.reload();
      } else {
        alert(result.error);
      }
    } catch (error) {
      console.error("Error creating elemento:", error);
      alert("Hubo un error al crear el elemento");
    }
  };

  return (
    <div className="flex justify-end mb-4">
       <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <PlusIcon className="w-4 h-4 mr-1" />
          Agregar Elemento
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Nuevo Elemento </DialogTitle>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="codigo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Código</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="nombre"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="tipo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo</FormLabel>
                    <FormControl>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecciona un tipo" />
                        </SelectTrigger>
                        <SelectContent>
                          {TIPOS.map((tipo) => (
                            <SelectItem key={tipo} value={tipo}>
                              {tipo}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="unidad"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Unidad</FormLabel>
                    <FormControl>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecciona una unidad" />
                        </SelectTrigger>
                        <SelectContent>
                          {UNIDADES.map((unidad) => (
                            <SelectItem key={unidad} value={unidad}>
                              {unidad}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="precio_unitario"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Precio Unitario</FormLabel>
                    <FormControl>
                      <Input type="number" step="0.01" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex justify-end mb-4">
                <Button type="submit">Crear Elemento</Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}

================
File: src/app/elementos/page.tsx
================
export const dynamic = "force-dynamic"; // 👈 Fuerza ruta dinámica
import { getElementos } from "@/services/elementoService";
import { Elemento } from "@/types/elemento";
import { DataTable } from "@/components/ui/data-table";
import { columns } from "./columns";
import NewElementForm from "./NewElementForm";

export default async function HomePage() {
  const elementos: Elemento[] = await getElementos({ cache: "no-store" });

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-4 text-center">Base de Elementos</h1>

    
      {/* Tabla de elementos */}
      <DataTable columns={columns} 
      data={elementos}
      addButton={<NewElementForm />}  />
    </div>
  );
}

================
File: src/app/globals.css
================
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import {
  NavigationMenu,
  NavigationMenuItem,
  NavigationMenuLink,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Analisis PU",
  description: "App en Next",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>

       <div className="flex justify-end p-4">
       <NavigationMenu>
          <NavigationMenuItem>
          <Link href="/" legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                Inicio
              </NavigationMenuLink>
            </Link>
            <Link href="/actividades" legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                Actividades
              </NavigationMenuLink>
            </Link>
            <Link href="/elementos" legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                Elementos
              </NavigationMenuLink>
            </Link>
            <Link href="/resumen" legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                Resumen
              </NavigationMenuLink>
            </Link>
          </NavigationMenuItem>
        </NavigationMenu>

       </div>

        <main className="p-4">{children}</main>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import { redirect } from "next/navigation"; // Importa redirect desde next/navigation

export default async function MyServerComponent() {
  // Lógica del servidor
  const shouldRedirect = true; // Condición para redireccionar

  if (shouldRedirect) {
    redirect("/actividades"); // Redirecciona a /actividades
  }

  return (
    <div>
      <h1>Pagina principal</h1>
    </div>
  );
}

================
File: src/app/resumen/page.tsx
================
// src/app/resumen/page.tsx
"use client"; // Marcar como componente del cliente

import { useState, useEffect } from "react"; // Importar useEffect
import { Actividad } from "@/types/actividad";
import { Elemento } from "@/types/elemento";
import { getActividades } from "@/services/actividadService";
import { getElementosAsignados } from "@/services/actividad-elemento";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";

export default function ResumenPage() {
  const [actividades, setActividades] = useState<Actividad[]>([]);
  const [elementosPorActividad, setElementosPorActividad] = useState<{
    [key: number]: Elemento[];
  }>({});

  // Cargar actividades y elementos asignados después de que el componente se monte
  useEffect(() => {
    const loadData = async () => {
      try {
        // Obtener todas las actividades
        const actividades = await getActividades();
        setActividades(actividades);

        // Obtener elementos asignados para cada actividad
        const elementosPorActividad: { [key: number]: Elemento[] } = {};
        for (const actividad of actividades) {
          const elementosAsignados = await getElementosAsignados(actividad.id);
          elementosPorActividad[actividad.id] = elementosAsignados;
        }
        setElementosPorActividad(elementosPorActividad);
      } catch (error) {
        console.error("Error cargando datos:", error);
      }
    };

    loadData();
  }, []); // El array vacío [] asegura que esto solo se ejecute una vez

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-6">Resumen de Actividades</h1>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Código</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Unidad</TableHead>
            <TableHead>Precio Unitario</TableHead>
            <TableHead>Acciones</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {actividades.map((actividad) => (
            <TableRow key={actividad.id}>
              <TableCell>{actividad.codigo}</TableCell>
              <TableCell>{actividad.nombre}</TableCell>
              <TableCell>{actividad.unidad}</TableCell>
              <TableCell>{actividad.precio_unitario}</TableCell>
              <TableCell>
                <Button
                  onClick={() => {
                    // Alternar la visibilidad de los elementos asignados
                    setElementosPorActividad((prev) => ({
                      ...prev,
                      [actividad.id]: prev[actividad.id] ? [] : elementosPorActividad[actividad.id],
                    }));
                  }}
                >
                  {elementosPorActividad[actividad.id]?.length ? "Ocultar" : "Mostrar"} Elementos
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {/* Mostrar elementos asignados para cada actividad */}
      {actividades.map((actividad) => (
        <div key={actividad.id} className="mt-4">
          {elementosPorActividad[actividad.id]?.length > 0 && (
            <div className="ml-8">
              <h2 className="text-xl font-bold mb-2">Elementos de {actividad.nombre}</h2>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Código</TableHead>
                    <TableHead>Nombre</TableHead>
                    <TableHead>Unidad</TableHead>
                    <TableHead>Precio Unitario</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {elementosPorActividad[actividad.id].map((elemento) => (
                    <TableRow key={elemento.id}>
                      <TableCell>{elemento.codigo}</TableCell>
                      <TableCell>{elemento.nombre}</TableCell>
                      <TableCell>{elemento.unidad}</TableCell>
                      <TableCell>{elemento.precio_unitario}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </div>
      ))}
    </div>
  );
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }

================
File: src/components/ui/data-table-pagination.tsx
================
import { Table } from "@tanstack/react-table"
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
} from "lucide-react"

import { Input } from "@/components/ui/input";

import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

interface DataTablePaginationProps<TData> {
  table: Table<TData>
}

export function DataTablePagination<TData>({
  table,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2">
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} of{" "}
        {table.getFilteredRowModel().rows.length} row(s) selected.
      </div>
      <div className="flex items-center space-x-6 lg:space-x-8">
        <div className="flex items-center space-x-2">
          <p className="text-sm font-medium">Rows per page</p>
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value))
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex w-[100px] items-center justify-center text-sm font-medium">
          Page {table.getState().pagination.pageIndex + 1} of{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to first page</span>
            <ChevronsLeft />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeft />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRight />
          </Button>
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to last page</span>
            <ChevronsRight />
          </Button>
        </div>
      </div>
    </div>
  )
}

================
File: src/components/ui/data-table-toolbar.tsx
================
"use client";

import { Table } from "@tanstack/react-table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Download, PlusCircle } from "lucide-react";
import * as XLSX from "xlsx";
import { useState } from "react";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import React from "react";
import NewActivityForm from "@/app/actividades/NewActivityForm";

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  onAddClick?: () => void; // Prop opcional para manejar el clic en "Agregar"
}

export function DataTableToolbar<TData>({
  table,
  
}: DataTableToolbarProps<TData>) {


  

  const exportToExcel = () => {
    const exportData = table.getRowModel().rows.map((row) => {
      const rowData: any = {};
      row.getVisibleCells().forEach((cell) => {
        const column = cell.column.columnDef;
        rowData[column.header as string] = cell.getValue();
      });
      return rowData;
    });

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "listado");
    XLSX.writeFile(workbook, "tabla.xlsx");
  };

  return (
    <div className="flex items-center justify-between py-4">

         {/* Botones a la derecha */}
         <div className="flex space-x-2">
        <Button variant="outline" size="sm" onClick={exportToExcel}>
          <Download className="w-4 h-4 mr-1" />
          Exportar Excel
        </Button>
    
      </div>
    </div>
  );
}

================
File: src/components/ui/data-table.tsx
================
// src/components/ui/data-table.tsx
"use client";

import * as React from "react";
import {
  ColumnDef,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  getFilteredRowModel,
} from "@tanstack/react-table";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "./input";
import { useState, useEffect } from "react";

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  addButton?: React.ReactNode; // Prop para el botón "Agregar" con su lógica de diálogo
}

export function DataTable<TData, TValue>({
  columns,
  data,
  addButton,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [rowSelection, setRowSelection] = React.useState({});
  const [globalFilter, setGlobalFilter] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
      rowSelection,
      globalFilter, // Conecta el globalFilter con el estado de la tabla
    },
    onGlobalFilterChange: setGlobalFilter, // Actualiza el globalFilter cuando cambia
    getFilteredRowModel: getFilteredRowModel(), // Habilita el filtrado global
  });

  // Conecta el searchTerm con el globalFilter
  useEffect(() => {
    setGlobalFilter(searchTerm);
  }, [searchTerm]);

  return (
    <div className="flex flex-col space-y-4">
      {/* Contenedor para el input y el botón */}
      <div className="flex items-center justify-between">
        {/* Input de búsqueda a la izquierda */}
        <div className="flex-1">
          <Input
            placeholder="Buscar..."
            value={searchTerm}
            onChange={(event) => setSearchTerm(event.target.value)} // Actualiza el searchTerm
            className="max-w-sm"
          />
        </div>

        {/* Botón "Agregar" a la derecha */}
        <div className="flex justify-end">
          {addButton} {/* Renderiza el botón "Agregar" pasado como prop */}
        </div>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive-foreground", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive-foreground text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: src/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  )
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center"
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props}
      />
    </div>
  )
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: src/components/ui/table.tsx
================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/lib/supabase.ts
================
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL ?? '',
  process.env.NEXT_PUBLIC_SUPABASE_KEY ?? ''
)

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/services/actividad-elemento.ts
================
// src/services/actividad-elemento.ts
import { supabase } from "@/lib/supabase";
import { Elemento } from "@/types/elemento";
import { ActividadElementos } from "@/types/actividadElementos";



// Crear un nuevo elemento

  // Método para obtener todos los registros de la tabla actividad_elemento
  export async function getActividadesConElementos(): Promise<any[]> {
    
    const { data, error } = await supabase
      .from('actividad_elemento')
      .select(`
        actividad_id,
        actividades:actividad_id (nombre),
        elemento_id,
        elementos:elemento_id (nombre),
        cantidad,
        
      `);


    if (error) {
      console.error('Error fetching actividad_elemento:', error);
      throw error;
    }

    return data || [];
  }

  // src/services/actividad-elemento.ts
export async function getElementosNoAsignados(actividadId: number): Promise<Elemento[]> {
  try {
    // Obtener los IDs de los elementos asignados
    const { data: asignados, error: errorAsignados } = await supabase
      .from("actividad_elemento")
      .select("elemento_id")
      .eq("actividad_id", actividadId);

    if (errorAsignados) throw errorAsignados;

    const idsAsignados = asignados.map((item) => item.elemento_id);

    // Obtener los elementos no asignados
    const { data: elementos, error: errorElementos } = await supabase
      .from("elementos")
      .select("*")
      .not("id", "in", `(${idsAsignados.join(",")})`);

    if (errorElementos) throw errorElementos;
    return elementos || [];
  } catch (error) {
    console.error("Error fetching elementos no asignados:", error);
    return [];
  }
}

  // src/services/actividad-elemento.ts
// src/services/actividad-elemento.ts
export async function asignarElemento(actividadId: number, elementoId: number): Promise<void> {
  try {
    const { data, error } = await supabase
      .from("actividad_elemento")
      .insert([{ actividad_id: actividadId, elemento_id: elementoId }])
      .select(); // Agrega .select() para obtener la respuesta

    if (error) {
      console.error("Error en Supabase:", error);
      throw error;
    }

    console.log("Elemento asignado correctamente:", data);
  } catch (error) {
    console.error("Error asignando elemento:", error);
    throw error;
  }
}

  // src/services/actividad-elemento.ts
export async function desasignarElemento(actividadId: number, elementoId: number): Promise<void> {
  try {
    const { error } = await supabase
      .from("actividad_elemento")
      .delete()
      .eq("actividad_id", actividadId)
      .eq("elemento_id", elementoId);

    if (error) throw error;
  } catch (error) {
    console.error("Error desasignando elemento:", error);
    throw error;
  }
}



export async function getElementosAsignados(actividadId: number): Promise<Elemento[]> {
  try {
    const { data, error } = await supabase
      .from("actividad_elemento")
      .select("elementos(*)")
      .eq("actividad_id", actividadId);

    if (error) throw error;

    // Tipar la respuesta como un array de objetos con la propiedad "elementos"
    const elementosAsignados = data as { elementos: Elemento }[];

    // Extraer y devolver solo los elementos
    return elementosAsignados.map((item) => item.elementos);
  } catch (error) {
    console.error("Error fetching elementos asignados:", error);
    return [];
  }
}

================
File: src/services/actividadService.ts
================
"use server";

import { supabase } from "@/lib/supabase";
import { Actividad, ActividadCreate } from "@/types/actividad";

export async function createActividad(
  actividad: ActividadCreate
): Promise<{ success: boolean; error?: string }> {
  try {
    const { data, error } = await supabase
      .from("actividades")
      .insert([actividad]);
    // .select(); // Devuelve el registro insertado

    if (error) {
      console.error("Error guardando Actividad:", error);
      return { success: false, error: error.message };
    }

    return { success: true };
  } catch (error) {
    console.error("Error inesperado al crear el Gasto:", error);
    return { success: false, error: "Error inesperado" };
  }
}

export async function getActividades(
  options = { cache: "force-cache" }
): Promise<Actividad[]> {
  try {
    const { data, error } = await supabase
      .from("actividades")
      .select("*")
      //.order("created_at", { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Error fetching Actividades:", error);
    throw error;
  }
}

export async function getActividadById(id: number): Promise<Actividad | null> {
  try {
    const { data, error } = await supabase
      .from("actividades")
      .select("*")
      .eq("id", id)
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error fetchingActividad:", error);
    throw error;
  }
}

export async function updateActividad(
  id: number,
  Actividad: Partial<Actividad>
): Promise<void> {
  try {
    const { error } = await supabase
      .from("actividades")
      .update(Actividad)
      .eq("id", id);

    if (error) throw error;
  } catch (error) {
    console.error("Error updating Actividad:", error);
    throw error;
  }
}

export async function deleteActividad(id: string): Promise<void> {
  try {
    const { error } = await supabase.from("actividades").delete().eq("id", id);

    if (error) throw error;
  } catch (error) {
    console.error("Error al eliminar Actividad:", error);
    throw error;
  }
}

export {};

================
File: src/services/elementoService.ts
================
"use server"; 

import { supabase } from "@/lib/supabase"; 
import { Elemento, ElementoCreate } from "@/types/elemento"; 

// Crear un nuevo elemento
// src/services/elementoService.ts
export async function createElemento(
  elemento: ElementoCreate
): Promise<{ success: boolean; error?: string }> {
  try {
    const elementoConFecha = {
      ...elemento,
      fecha: new Date(), // Agregar la fecha actual
    };

    const { data, error } = await supabase
      .from("elementos")
      .insert([elementoConFecha])
      .select()
      .single();

    if (error) {
      console.error("Error al crear el elemento:", error);
      return { success: false, error: error.message };
    }

    return { success: true };
  } catch (error) {
    console.error("Error inesperado al crear el elemento:", error);
    return { success: false, error: "Error inesperado" };
  }
}

// Obtener todos los elementos
export async function getElementos(): Promise<Elemento[]> {
  try {
    const { data, error } = await supabase.from("elementos").select("*");

    if (error) throw error;

    // Convertir el campo fecha a un objeto Date
    return data.map((elemento) => ({
      ...elemento,
      //fecha: new Date(elemento.fecha), // Convertir a Date
    }));
  } catch (error) {
    console.error("Error al obtener los elementos:", error);
    throw error;
  }
}

// Obtener elementos no asignados a una actividad
export async function getElementosNoAsignados(
  actividadId: number
): Promise<Elemento[]> {
  try {
    const idsAsignados = await getIdsAsignados(actividadId);
    const { data, error } = await supabase
      .from("elementos")
      .select("*")
      .not("id", "in", `(${idsAsignados})`);

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Error al obtener elementos no asignados:", error);
    throw error;
  }
}

// Obtener IDs de elementos asignados a una actividad
async function getIdsAsignados(actividadId: number): Promise<string> {
  try {
    const { data, error } = await supabase
      .from("actividad_elemento")
      .select("elemento_id")
      .eq("actividad_id", actividadId);

    if (error) throw error;
    return data.map((item) => item.elemento_id).join(",");
  } catch (error) {
    console.error("Error al obtener IDs asignados:", error);
    throw error;
  }
}

// Actualizar un elemento
export async function updateElemento(
  id: number,
  elemento: Partial<Elemento>
): Promise<void> {
  try {
    const { error } = await supabase
      .from("elementos")
      .update(elemento)
      .eq("id", id);

    if (error) throw error;
  } catch (error) {
    console.error("Error al actualizar el elemento:", error);
    throw error;
  }
}

// Obtener un elemento por ID
export async function getElementoById(id: number): Promise<Elemento | null> {
  try {
    const { data, error } = await supabase
      .from("elementos")
      .select("*")
      .eq("id", id)
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error al obtener el elemento:", error);
    throw error;
  }
}

// Eliminar un elemento
export async function deleteElemento(id: number): Promise<void> {
  try {
    const { error } = await supabase.from("elementos").delete().eq("id", id);

    if (error) throw error;
  } catch (error) {
    console.error("Error al eliminar el elemento:", error);
    throw error;
  }
}

================
File: src/types/actividad.ts
================
export interface Actividad {

    id: number;
    codigo: string;
    nombre: string;
    descripcion: string;
    unidad: string;
    precio_unitario: number;

    //precioTotal?: number;
    //fechaUpdate: Date;
    //elementos: Elemento[];



}
export interface ActividadCreate {

    codigo: string;
    nombre: string;
    descripcion: string;
    unidad: string;
    precio_unitario: number;
} 

export const UNIDADES = [

    "ML",
    "M²",	
    "M³",
    
] as const;

================
File: src/types/actividadElementos.ts
================
export interface ActividadElementos {

    id: number;
    actividad_id: number;
    elemento_id: number;
    cantidad: number;
   
    
   
}

================
File: src/types/elemento.ts
================
export interface Elemento {
    
    id:number;
    codigo: string;
    nombre: string;
    tipo:string;
    unidad: string;
    precio_unitario: number;
    fecha: Date;    
}

export interface ElementoCreate {

    codigo: string;
    nombre: string;
    tipo:string;
    unidad: string;
    precio_unitario: number;
    fecha?: Date;    
}

export const UNIDADES = [

    "ML",
    "M²",	
    "M³",
    "Kg",
    "L",
    "Unidad",
    "Tonelada",
    "Pieza",            
    "Caja",
    "Paquete",
    "Dia",
    "Hora",
    "rollo",



] as const;

export const TIPOS = [
    
    "Material",
    "Mano de Obra",
    "Maquinaria"

] as const;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
